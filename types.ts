// This file is auto-generated by @hey-api/openapi-ts

export type About = {
    /**
     * A map of other properties as needed.
     */
    extensions?: {
        [key: string]: unknown;
    };
    /**
     * xAPI versions this LRS supports
     */
    version: Array<(string)>;
};

export type AccountInfo = {
    homePage: Iri;
    /**
     * The unique id or name used to log in to this account.
     * This is based on FOAF's accountName.
     */
    name: string;
};

/**
 * Every value in the contextActivities Object shall be either a single Activity Object
 * or an array of Activity Objects
 */
export type Activities = ActivityObject | Array<ActivityObject>;

export type Activity = {
    definition?: ActivityDefinition;
    id: Iri;
};

export type ActivityDefinition = TaggedActivityDefinition | SimpleActivityDefinition;

export type ActivityObject = Activity & {
    objectType: 'Activity';
};



export type ActivityParams = {
    activityId: Iri;
};

export type ActivityProfileIdParams = {
    activityId: Iri;
    /**
     * The profile id associated with this Profile document.
     */
    profileId: string;
};

export type ActivityProfileParams = ActivityProfileIdParams | ActivityProfileSinceParams;

export type ActivityProfileSinceParams = {
    activityId: Iri;
    /**
     * Only ids of activity stored since the specified Timestamp (exclusive) are returned.
     */
    since?: string;
};

export type ActivityStateDeleteParams = {
    activityId: Iri;
    agent: AgentObject;
    /**
     * The registration associated with this state.
     */
    registration?: string;
    /**
     * The id for this state, within the given context.
     * If not specified, deletes all state data for this context (Activity + Agent [+ registration if specified]).
     */
    stateId?: string;
};

export type ActivityStateIdParams = {
    activityId: Iri;
    agent: AgentObject;
    /**
     * The registration associated with this state.
     */
    registration?: string;
    /**
     * The id for this state, within the given context.
     */
    stateId: string;
};

export type ActivityStateParams = ActivityStateIdParams | ActivityStateSinceParams;

export type ActivityStateSinceParams = {
    activityId: Iri;
    agent: AgentObject;
    /**
     * The registration associated with this state.
     */
    registration?: string;
    /**
     * Only ids of states stored since the specified Timestamp (exclusive) are returned.
     */
    since?: string;
};

export type ActorObject = TaggedActorObject | UntaggedActorObject;

export type Agent = AgentMBox | AgentMBoxSha1sum | AgentOpenId | AgentAccount;

export type AgentAccount = {
    account: AccountInfo;
    /**
     * The unique id or name used to log in to this account.
     * This is based on FOAF's accountName.
     */
    name?: string;
};

export type AgentMBox = {
    mbox: Iri;
    /**
     * The unique id or name used to log in to this account.
     * This is based on FOAF's accountName.
     */
    name?: string;
};

export type AgentMBoxSha1sum = {
    mbox_sha1sum: MBoxSha1sum;
    /**
     * The unique id or name used to log in to this account.
     * This is based on FOAF's accountName.
     */
    name?: string;
};

export type AgentObject = TaggedAgentObject | Agent;

export type AgentOpenId = {
    /**
     * The unique id or name used to log in to this account.
     * This is based on FOAF's accountName.
     */
    name?: string;
    openid: Iri;
};

export type AgentParams = {
    agent: AgentObject;
};

export type AgentProfileIdParams = {
    agent: AgentObject;
    /**
     * The profile id associated with this Profile document.
     */
    profileId: string;
};

export type AgentProfileParams = AgentProfileIdParams | AgentProfileSinceParams;

export type AgentProfileSinceParams = {
    agent: AgentObject;
    /**
     * Only ids of states stored since the specified Timestamp (exclusive) are returned.
     */
    since?: string;
};

export type AnyObject = TaggedObject | Activity;

export type Attachment = {
    /**
     * The content type of the Attachment.
     */
    contentType: string;
    description?: LanguageMap;
    display: LanguageMap;
    /**
     * An IRL at which the Attachment data can be retrieved, or from which it used to be retrievable.
     */
    fileUrl?: string;
    /**
     * The length of the Attachment data in octets.
     */
    length: number;
    /**
     * The SHA-2 (FIPS PUB 180-2) hash of the Attachment data.
     * This property is always required, even if fileURL is also specified.
     */
    sha2: string;
    usageType: Iri;
};

/**
 * An interaction with a number of possible choices from which the learner can select.
 * This includes interactions in which the learner can select only one answer from the
 * list and those where the learner can select multiple items.
 */
export type ChoiceActivityDefinition = {
    choices: Array<InteractionComponent>;
    /**
     * A list of item ids delimited by [,]. If the response contains only one item, the delimiter shall not be used.
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    type?: Iri;
};

/**
 * Property to add contextual information to a Statement.
 * It can store information such as the instructor for an experience,
 * if this experience happened as part of a team-based Activity,
 * or how an experience fits into some broader activity.
 */
export type Context = {
    contextActivities?: ContextActivities;
    /**
     * Collection of Objects describing relationship(s) between Agent(s) and the current Statement.
     * Zero or more Relevant Type IRIs are used to categorize these relationship(s)
     */
    contextAgents?: Array<ContextAgentObject>;
    /**
     * Collection of Objects describing relationship(s) between Identified or Anonymous Group(s) and the current Statement.
     * Zero or more Relevant Type IRIs are used to categorize these relationship(s)
     */
    contextGroups?: Array<ContextGroupObject>;
    /**
     * A map of any other domain-specific context relevant to this Statement.
     * For example, in a flight simulator altitude, airspeed, wind, attitude, GPS coordinates might all be relevant
     */
    extensions?: {
        [key: string]: unknown;
    };
    instructor?: ActorObject;
    language?: Language;
    /**
     * Platform used in the experience of this learning activity.
     */
    platform?: string;
    /**
     * The registration that the Statement is associated with.
     * This is a UUID.
     */
    registration?: string;
    /**
     * Revision of the learning activity associated with this Statement. Format is free.
     */
    revision?: string;
    statement?: MaybeTaggedStatementRef;
    team?: GroupObject;
};

/**
 * A map of the types of learning activity context that this Statement is related to.
 */
export type ContextActivities = {
    category?: Activities;
    grouping?: Activities;
    other?: Activities;
    parent?: Activities;
};

/**
 * Collection of Objects describing relationship(s) between Agent(s) and the current Statement.
 * Zero or more Relevant Type IRIs are used to categorize these relationship(s)
 */
export type ContextAgent = {
    agent: AgentObject;
    /**
     * A collection of 1 or more Relevant Type(s) used to characterize the relationship between the Statement and the Agent.
     * If not provided, only a generic relationship is intended (not recommended)
     */
    relevantTypes?: Array<(string)>;
};

export type ContextAgentObject = ContextAgent & {
    objectType: 'contextAgent';
};



/**
 * Collection of Objects describing relationship(s) between Identified or Anonymous Group(s) and the current Statement.
 * Zero or more Relevant Type IRIs are used to categorize these relationship(s)
 */
export type ContextGroup = {
    group: GroupObject;
    /**
     * A collection of 1 or more Relevant Type(s) used to characterize the relationship between the Statement and the Agent.
     * If not provided, only a generic relationship is intended (not recommended)
     */
    relevantTypes?: Array<(string)>;
};

export type ContextGroupObject = ContextGroup & {
    objectType: 'contextGroup';
};



/**
 * An interaction which requires the learner to supply a short response in the form of one
 * or more strings of characters. Typically, the correct response consists of part of a word,
 * one word or a few words. "Short" means that the correct responses pattern and learner response
 * strings are normally be 250 characters or less.
 */
export type FillInActivityDefinition = {
    /**
     * A list of responses delimited by [,]. If the response contains only one item,
     * the delimiter shall not be used.
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    type?: Iri;
};

export type Group = GroupMBox | GroupMBoxSha1sum | GroupOpenid | GroupAccount | GroupAnonymous;

export type GroupAccount = {
    account: AccountInfo;
    /**
     * The members of this Group. This is an unordered list.
     */
    member?: Array<AgentObject>;
    /**
     * Name of the Group.
     */
    name?: string;
};

export type GroupAnonymous = {
    /**
     * The members of this Group. This is an unordered list.
     */
    member: Array<AgentObject>;
    /**
     * Name of the Group.
     */
    name?: string;
};

export type GroupMBox = {
    mbox: Iri;
    /**
     * The members of this Group. This is an unordered list.
     */
    member?: Array<AgentObject>;
    /**
     * Name of the Group.
     */
    name?: string;
};

export type GroupMBoxSha1sum = {
    mbox_sha1sum: MBoxSha1sum;
    /**
     * The members of this Group. This is an unordered list.
     */
    member?: Array<AgentObject>;
    /**
     * Name of the Group.
     */
    name?: string;
};

export type GroupObject = Group & {
    objectType: 'Group';
};



export type GroupOpenid = {
    /**
     * The members of this Group. This is an unordered list.
     */
    member?: Array<AgentObject>;
    /**
     * Name of the Group.
     */
    name?: string;
    openid: Iri;
};

/**
 * Interaction Component Lists Item
 */
export type InteractionComponent = {
    description?: LanguageMap;
    /**
     * Identifies the interaction component within the list.
     */
    id: string;
};

export type Iri = string;

export type Language = string;

export type LanguageMap = {
    [key: string]: (string);
};

/**
 * An interaction which asks the learner to select from a discrete set of choices on a scale
 */
export type LikertActivityDefinition = {
    /**
     * A single item id from the scale.
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    scale: Array<InteractionComponent>;
    type?: Iri;
};

/**
 * An interaction which requires the learner to supply a response in the form of a long string of characters.
 * "Long" means that the correct responses pattern and learner response strings are normally be more than 250 characters.
 */
export type LongFillInActivityDefinition = {
    /**
     * A list of responses delimited by [,]. If the response contains only one item,
     * the delimiter shall not be used.
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    type?: Iri;
};

export type MBox = Iri;

/**
 * The hex-encoded SHA1 hash of a mailto IRI (i.e. the value of an mbox property).
 * An LRS may include Agents with a matching hash when a request is based on an mbox.
 */
export type MBoxSha1sum = string;

/**
 * An interaction where the learner is asked to match items in one set (the source set) to items
 * in another set (the target set). Items do not have to pair off exactly and it is possible for
 * multiple or zero source items to be matched to a given target and vice versa.
 */
export type MatchingActivityDefinition = {
    /**
     * A list of matching pairs, where each pair consists of a source item id followed by a target item id.
     * Items can appear in multiple (or zero) pairs. Items within a pair are delimited by [.].
     * Pairs are delimited by [,].
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    source: Array<InteractionComponent>;
    target: Array<InteractionComponent>;
    type?: Iri;
};

/**
 * This type exists to work around the missing doc for StatementRef in
 * the statement context.
 */
export type MaybeTaggedStatementRef = TaggedStatementRef | StatementRef;

/**
 * Any interaction which requires a numeric response from the learner.
 */
export type NumericActivityDefinition = {
    /**
     * A range of numbers represented by a minimum and a maximum delimited by [:].
     * Where the range does not have a maximum or does not have a minimum,
     * that number is omitted but the delimiter is still used.
     * E.g. [:]4 indicates a maximum for 4 and no minimum. Where the correct response or
     * learner's response is a single number rather than a range,
     * the single number with no delimiter may be used.
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    type?: Iri;
};

export type OpenId = Iri;

/**
 * Another type of interaction that does not fit into a special definition.
 */
export type OtherActivityDefinition = {
    /**
     * Any format is valid within this string as appropriate for the type of interaction.
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    type?: Iri;
};

/**
 * An interaction that requires the learner to perform a task that requires multiple steps.
 */
export type PerformanceActivityDefinition = {
    /**
     * A list of steps containing a step ids and the response to that step.
     * Step ids are separated from responses by [.]. Steps are delimited by [,].
     * The response can be a String as in a fill-in interaction or a number range as in a numeric interaction.
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    steps: Array<InteractionComponent>;
    type?: Iri;
};

export type Person = {
    /**
     * List of account objects that uniquely identify the Agents retrieved.
     */
    account?: Array<AccountInfo>;
    /**
     * List of e-mail addresses of Agents retrieved.
     */
    mbox?: Array<Iri>;
    /**
     * List of the SHA1 hashes of mailto IRIs (such as go in an mbox property).
     */
    mbox_sha1sum?: Array<MBoxSha1sum>;
    /**
     * List of names of Agents retrieved.
     */
    name?: Array<(string)>;
    /**
     * This has to be "Person"
     */
    objectType: string;
    /**
     * List of openids that uniquely identify the Agents retrieved.
     */
    openid?: Array<Iri>;
};

/**
 * Represents the outcome of a graded Activity achieved by an Agent.
 */
export type Score = {
    /**
     * The highest possible score for the experience described by the Statement.
     * Decimal number greater than min (if present)
     */
    max?: number;
    /**
     * The lowest possible score for the experience described by the Statement.
     * Decimal number less than max (if present)
     */
    min?: number;
    /**
     * The score achieved by the Actor in the experience described by the Statement.
     * This is not modified by any scaling or normalization.
     * Decimal number between min and max (if present, otherwise unrestricted), inclusive.
     */
    raw?: number;
    /**
     * The score related to the experience as modified by scaling and/or normalization.
     * Recommended
     */
    scaled?: number;
};

/**
 * An interaction where the learner is asked to order items in a set.
 */
export type SequencingActivityDefinition = {
    choices: Array<InteractionComponent>;
    /**
     * An ordered list of item ids delimited by [,].
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    type?: Iri;
};

export type SimpleActivityDefinition = {
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    type?: Iri;
};

export type Statement = {
    actor: ActorObject;
    /**
     * Headers for Attachments to the Statement
     */
    attachments?: Array<Attachment>;
    authority?: ActorObject;
    context?: Context;
    /**
     * UUID assigned by LRS if not set by the Learning Record Provider.
     */
    id?: string;
    object: AnyObject;
    result?: StatementResult;
    /**
     * Timestamp of when this Statement was recorded. Set by LRS.
     *
     * Not Recommended
     */
    stored?: string;
    /**
     * Timestamp of when the events described within this Statement occurred
     * (it can represent any point during an experience, not necessarily the beginning or end). Set by the LRS if not provided.
     *
     * Not Recommended
     */
    timestamp?: string;
    verb: Verb;
    /**
     * The Statement's associated xAPI version, formatted according to Semantic Versioning 1.0.0.
     *
     * Not Recommended
     */
    version?: string;
};

export type StatementBody = Statement | Array<Statement>;

export type StatementFormat = 'ids' | 'exact' | 'canonical';

export type StatementRef = {
    /**
     * The UUID of a Statement.
     */
    id: string;
};

/**
 * Represents a measured outcome related to the Statement in which it is included.
 */
export type StatementResult = {
    /**
     * Indicates whether or not the Activity was completed.
     */
    completion?: boolean;
    /**
     * Period of time over which the Statement occurred.
     */
    duration?: string;
    /**
     * A map of other properties as needed.
     */
    extensions?: {
        [key: string]: unknown;
    };
    /**
     * A response appropriately formatted for the given Activity.
     */
    response?: string;
    score?: Score;
    /**
     * Indicates whether or not the attempt on the Activity was successful.
     */
    success?: boolean;
};

export type StatementsParams = {
    activity?: Iri;
    agent?: AgentObject;
    /**
     * If true, return results in ascending order of stored time.
     */
    ascending?: boolean;
    /**
     * If true, the LRS uses the multipart response format and includes all attachments as described previously. If false, the LRS sends the prescribed response with Content-Type application/json and does not send attachment data.
     */
    attachments?: boolean;
    format?: StatementFormat;
    /**
     * Maximum number of Statements to return. 0 indicates return the maximum the server allows.
     */
    limit?: number;
    /**
     * Filter, only return Statements matching the specified registration id. Note that although frequently a unique registration is used for one Actor assigned to one Activity, this cannot be assumed. If only Statements for a certain Actor or Activity are required, those parameters also need to be specified.
     */
    registration?: string;
    /**
     * Apply the Agent filter broadly. Include Statements for which the Actor, Object, Authority, Instructor, Team, Context Agent, Context Group, or any of these properties in a contained SubStatement match the Agent parameter, instead of that parameter's normal behavior. Matching is defined in the same way it is for the "agent" parameter.
     */
    related_activities?: boolean;
    /**
     * Apply the Agent filter broadly. Include Statements for which the Actor, Object, Authority, Instructor, Team, Context Agent, Context Group, or any of these properties in a contained SubStatement match the Agent parameter, instead of that parameter's normal behavior. Matching is defined in the same way it is for the "agent" parameter.
     */
    related_agents?: boolean;
    /**
     * Only Statements stored since the specified Timestamp (exclusive) are returned.
     */
    since?: string;
    /**
     * Id of Statement to fetch.
     */
    statementId?: string;
    /**
     * Only Statements stored at or before the specified Timestamp are returned.
     */
    until?: string;
    verb?: Iri;
    /**
     * Id of voided Statement to fetch.
     */
    voidedStatementId?: string;
};

export type StatementsPutParams = {
    /**
     * Id of Statement to fetch.
     */
    statementId: string;
};

export type StatementsResult = {
    /**
     * Relative IRL that can be used to fetch more results, including the full path and optionally a query string but excluding scheme, host, and port.
     * Empty string if there are no more results to fetch.
     */
    more?: string;
    /**
     * List of Statements. If the list returned has been limited (due to pagination), and there are more results, they will be located at the "statements" property within the container located at the IRL provided by the "more" property of this Statement result Object.
     * Where no matching Statements are found, this property will contain an empty array.
     */
    statements: Array<Statement>;
};

export type SubObject = TaggedSubObject | Activity;

export type SubStatement = {
    actor: ActorObject;
    /**
     * Headers for Attachments to the Statement
     */
    attachments?: Array<Attachment>;
    context?: Context;
    object: SubObject;
    result?: StatementResult;
    /**
     * Timestamp of when the events described within this Statement occurred
     * (it can represent any point during an experience, not necessarily the beginning or end).
     * Set by the LRS if not provided.
     *
     * Not Recommended
     */
    timestamp?: string;
    verb: Verb;
};

export type TaggedActivityDefinition = ChoiceActivityDefinition & {
    interactionType: 'choice';
} | FillInActivityDefinition & {
    interactionType: 'fill-in';
} | LikertActivityDefinition & {
    interactionType: 'likert';
} | LongFillInActivityDefinition & {
    interactionType: 'long-fill-in';
} | MatchingActivityDefinition & {
    interactionType: 'matching';
} | NumericActivityDefinition & {
    interactionType: 'numeric';
} | OtherActivityDefinition & {
    interactionType: 'other';
} | PerformanceActivityDefinition & {
    interactionType: 'performance';
} | SequencingActivityDefinition & {
    interactionType: 'sequencing';
} | TrueFalseActivityDefinition & {
    interactionType: 'true-false';
};



export type TaggedActorObject = Agent & {
    objectType: 'Agent';
} | Group & {
    objectType: 'Group';
};



export type TaggedAgentObject = Agent & {
    objectType: 'Agent';
};

export type TaggedObject = Agent & {
    objectType: 'Agent';
} | Group & {
    objectType: 'Group';
} | Activity & {
    objectType: 'Activity';
} | SubStatement & {
    objectType: 'SubStatement';
} | StatementRef & {
    objectType: 'StatementRef';
};

export type TaggedStatementRef = StatementRef & {
    objectType: 'StatementRef';
};



export type TaggedSubObject = Agent & {
    objectType: 'Agent';
} | Group & {
    objectType: 'Group';
} | Activity & {
    objectType: 'Activity';
} | StatementRef & {
    objectType: 'StatementRef';
};

/**
 * An interaction with two possible responses: true or false.
 */
export type TrueFalseActivityDefinition = {
    /**
     * Either true or false
     */
    correctResponsesPattern: Array<(string)>;
    description?: LanguageMap;
    /**
     * A map of other properties as needed
     */
    extensions?: {
        [key: string]: unknown;
    };
    moreInfo?: Iri;
    name?: LanguageMap;
    type?: Iri;
};

export type UntaggedActorObject = Agent | Group;

export type Verb = {
    display?: LanguageMap;
    id: Iri;
};

export type WebUri = Iri;